AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
    Username:
        Type: String
        Default: ormarcos@amazon.com
        Description: A valid email address is required

Mappings: 
    AmazonLinux2ImageMap: 
        us-east-1:
            HVM64: ami-0c6b1d09930fac512
        us-east-2:
            HVM64: ami-0ebbf2179e615c338
        us-west-1:
            HVM64: ami-015954d5e5548d13b
        eu-west-2:
            HVM64: ami-0cb72367e98845d43

Resources: 
    HandleSpotNotification:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: lambda/handle_spot_notification.Lambda::RecordInterruption.lambda_handler
            Runtime: ruby2.5
            Environment:
                Variables:
                    INTERRUPTIONS_TABLE_NAME: !Ref SpotInterruptionsTable
                    SFR_TABLE_NAME: !Ref SpotFleetRequestsTable
            Events:
                SpotInterruption:
                    Type: CloudWatchEvent
                    Properties:
                        Pattern:
                            source:
                              - aws.ec2
                            detail-type:
                              - EC2 Spot Instance Interruption Warning
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:PutItem
                        - dynamodb:UpdateItem
                      Resource:
                        - !GetAtt SpotInterruptionsTable.Arn
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:Scan
                      Resource:
                        - !GetAtt SpotFleetRequestsTable.Arn
    AppLogGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: spot-demo-app
            RetentionInDays: 5
    HandleWorkloadEvents:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: lambda/handle_workload_events.Lambda::HandleWorkloadEvents.lambda_handler
            Runtime: ruby2.5
            Environment:
                Variables:
                    TABLE_NAME: !Ref SpotWorkloads
                    QUEUE_URL: !Ref InterruptedSpotWorkloads
            Events:
                ProgressEvent:
                    Type: CloudWatchLogs
                    Properties:
                        LogGroupName: !Ref AppLogGroup
                        FilterPattern: "[recorded_at,  level=PROGRESS || level=SAVING_PROGRESS || level=STARTED_AT || level=RESUMED_FROM || level=FINISHED_AT || level=NOTIFIED_AT, workloadId, instanceId, value]"
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:UpdateItem
                      Resource:
                        - !GetAtt SpotWorkloads.Arn
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - sqs:SendMessage
                      Resource:
                        - !GetAtt InterruptedSpotWorkloads.Arn
    GetWorkloadInitialState:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: lambda/get_workload_initial_state.Lambda::GetWorkloadInitialState.lambda_handler
            Runtime: ruby2.5
            Timeout: 15
            Environment:
                Variables:
                    WORKLOADS_QUEUE_URL: !Ref InterruptedSpotWorkloads
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - sqs:DeleteMessage
                        - sqs:ReceiveMessage
                      Resource:
                        - !GetAtt InterruptedSpotWorkloads.Arn
    QueryWorkloads:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./src
            Handler: lambda/query_workloads.Lambda::QueryWorkloads.lambda_handler
            Runtime: ruby2.5
            Timeout: 15
            Environment:
                Variables:
                    TABLE_NAME: !Ref SpotWorkloads
            Policies:
                - AWSLambdaExecute # Managed Policy
                - Version: '2012-10-17' # Policy Document
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:Query
                        - dynamodb:Scan
                      Resource:
                        - !GetAtt SpotWorkloads.Arn
    SpotFleetRequestsTable:
        Type: AWS::Serverless::SimpleTable
        Properties:
            PrimaryKey:
                Name: id
                Type: String
    SpotInterruptionsTable: 
        Type: AWS::DynamoDB::Table
        Properties: 
            AttributeDefinitions: 
                - 
                    AttributeName: sfrId
                    AttributeType: S
                - 
                    AttributeName: instanceId
                    AttributeType: S
            KeySchema: 
                - 
                    AttributeName: sfrId
                    KeyType: HASH
                - 
                    AttributeName: instanceId
                    KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    SpotWorkloads: 
        Type: AWS::DynamoDB::Table
        Properties: 
            AttributeDefinitions: 
                - 
                    AttributeName: id
                    AttributeType: S
            KeySchema: 
                - 
                    AttributeName: id
                    KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    InterruptedSpotWorkloads:
        Type: AWS::SQS::Queue
        Properties: 
            ContentBasedDeduplication: true
            DelaySeconds: 0
            FifoQueue: true
            Tags: 
                -
                    Key: Name
                    Value: spot-demo-vpc-public2
    SpotDemoUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Schema:
                - 
                    AttributeDataType: String
                    Name: email
                    Required: true
            AdminCreateUserConfig: 
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                    EmailMessage:
                        Fn::Sub: |
                            <p>You are invited to join AWS Spot Instances Demo App. Your temporary password is as follows:</p>
                            <p>
                            username: {username} <br />
                            Password: <strong>{####}</strong>
                            </p>
                            <p>
                            Please sign in to the GUI with your username and temporary password provided above.
                            </p>
                    EmailSubject: Your temporary password for AWS Spot Instance Demo App
            EmailVerificationMessage: "Your AWS Spot Instance Demo App verification code is {####}."
            UsernameAttributes:
                - email
    UserPoolUser:
        Type: AWS::Cognito::UserPoolUser
        Properties:
            DesiredDeliveryMediums: 
                - EMAIL
            UserAttributes: 
                - Name: email
                  Value: !Ref Username
            Username: !Ref Username
            UserPoolId: !Ref SpotDemoUserPool
    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            GenerateSecret: false
            RefreshTokenValidity: 200
            UserPoolId: !Ref SpotDemoUserPool
    SpotDemoIdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
                - 
                    ClientId: !Ref UserPoolClient
                    ProviderName: !GetAtt SpotDemoUserPool.ProviderName
    SpotDemoIdentityPoolAuthRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - 
                        Effect: "Allow"
                        Principal:
                            Federated:
                                - "cognito-identity.amazonaws.com"
                        Action:
                            - "sts:AssumeRoleWithWebIdentity"
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref SpotDemoIdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: authenticated
            Path: "/"
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-sts'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - mobileanalytics:PutEvents
                                    - cognito-sync:*
                                    - cognito-identity:*
                                Resource: '*'
                - 
                    PolicyName: !Sub '${AWS::StackName}-ec2'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - ec2:*
                                Resource: '*'
                - 
                    PolicyName: !Sub '${AWS::StackName}-iam'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - iam:AddRoleToInstanceProfile
                                    - iam:AttachRolePolicy
                                    - iam:CreateInstanceProfile
                                    - iam:CreateRole
                                    - iam:CreateServiceLinkedRole
                                    - iam:GetRole
                                    - iam:ListInstanceProfiles
                                    - iam:ListPolicies
                                    - iam:ListRoles
                                    - iam:PassRole
                                Resource: '*'
                - 
                    PolicyName: !Sub '${AWS::StackName}-ddb'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - dynamodb:DeleteItem
                                    - dynamodb:PutItem
                                    - dynamodb:Query
                                    - dynamodb:Scan
                                Resource: !GetAtt SpotFleetRequestsTable.Arn
                            - 
                                Effect: Allow
                                Action:
                                    - dynamodb:Scan
                                Resource: !GetAtt SpotInterruptionsTable.Arn
                - 
                    PolicyName: !Sub '${AWS::StackName}-lambda'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - lambda:InvokeFunction
                                Resource: !GetAtt QueryWorkloads.Arn
    IdentityPoolRoleAttachment:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref SpotDemoIdentityPool
            Roles:
                authenticated: !GetAtt SpotDemoIdentityPoolAuthRole.Arn
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsHostnames: True
            EnableDnsSupport: True
            Tags:
                - Key: Name
                  Value: spot-demo-vpc
    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties : 
            CidrBlock : 10.0.0.0/24
            MapPublicIpOnLaunch : False
            AvailabilityZone:
              Fn::Select: 
                - 0
                - Fn::GetAZs: ""
            Tags:
                - Key: Name
                  Value: spot-demo-vpc-public1
            VpcId : !Ref VPC
    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties : 
            CidrBlock : 10.0.1.0/24
            MapPublicIpOnLaunch : False
            AvailabilityZone:
              Fn::Select: 
                - 1
                - Fn::GetAZs: ""
            Tags:
                - Key: Name
                  Value: spot-demo-vpc-public2
            VpcId : !Ref VPC
    PublicSubnet3:
        Type: AWS::EC2::Subnet
        Properties : 
            CidrBlock : 10.0.2.0/24
            MapPublicIpOnLaunch : False
            AvailabilityZone:
              Fn::Select: 
                - 2
                - Fn::GetAZs: ""
            Tags:
                - Key: Name
                  Value: spot-demo-vpc-public3
            VpcId : !Ref VPC
    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties : 
            CidrBlock : 10.0.3.0/24
            MapPublicIpOnLaunch : False
            AvailabilityZone:
              Fn::Select: 
                - 0
                - Fn::GetAZs: ""
            Tags:
                - Key: Name
                  Value: spot-demo-vpc-private1
            VpcId : !Ref VPC
    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties : 
            CidrBlock : 10.0.4.0/24
            MapPublicIpOnLaunch : False
            AvailabilityZone:
              Fn::Select: 
                - 1
                - Fn::GetAZs: ""
            Tags:
                - Key: Name
                  Value: spot-demo-vpc-private2
            VpcId : !Ref VPC
    PrivateSubnet3:
        Type: AWS::EC2::Subnet
        Properties : 
            CidrBlock : 10.0.5.0/24
            MapPublicIpOnLaunch : False
            AvailabilityZone:
              Fn::Select: 
                - 2
                - Fn::GetAZs: ""
            Tags:
                - Key: Name
                  Value: spot-demo-vpc-private3
            VpcId : !Ref VPC
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties : 
            Tags:
                - Key: Name
                  Value: spot-demo-igw
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties : 
            InternetGatewayId : !Ref InternetGateway
            VpcId : !Ref VPC
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties : 
            Tags : 
                - Key: Name
                  Value: spot-demo-public-rt
            VpcId : !Ref VPC
    PublicRoute:
        Type: AWS::EC2::Route
        Properties : 
            DestinationCidrBlock : 0.0.0.0/0
            GatewayId : !Ref InternetGateway
            RouteTableId : !Ref PublicRouteTable
    PublicSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties : 
            RouteTableId : !Ref PublicRouteTable
            SubnetId : !Ref PublicSubnet1
    PublicSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties : 
            RouteTableId : !Ref PublicRouteTable
            SubnetId : !Ref PublicSubnet2
    PublicSubnetRouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties : 
            RouteTableId : !Ref PublicRouteTable
            SubnetId : !Ref PublicSubnet3
    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId:
                Fn::GetAtt:
                - EIP1
                - AllocationId
            SubnetId:
                Ref: PublicSubnet1
            Tags:
                - Key: Name
                  Value: spot-demo-nat-gw
    EIP1:
        DependsOn: InternetGatewayAttachment
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId:
                Fn::GetAtt:
                - EIP2
                - AllocationId
            SubnetId:
                Ref: PublicSubnet2
            Tags:
                - Key: Name
                  Value: spot-demo-nat-gw
    EIP2:
        DependsOn: InternetGatewayAttachment
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
    NatGateway3:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId:
                Fn::GetAtt:
                - EIP3
                - AllocationId
            SubnetId:
                Ref: PublicSubnet3
            Tags:
                - Key: Name
                  Value: spot-demo-nat-gw
    EIP3:
        DependsOn: InternetGatewayAttachment
        Type: AWS::EC2::EIP
        Properties:
            Domain: vpc
    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties : 
            Tags : 
                - Key: Name
                  Value: spot-demo-private-rt1
            VpcId : !Ref VPC
    PrivateRoute1:
        Type: AWS::EC2::Route
        Properties : 
            DestinationCidrBlock : 0.0.0.0/0
            NatGatewayId : !Ref NatGateway1
            RouteTableId : !Ref PrivateRouteTable1
    PrivateSubnetRouteTableAssociation1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties : 
            RouteTableId : !Ref PrivateRouteTable1
            SubnetId : !Ref PrivateSubnet1
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties : 
            Tags : 
                - Key: Name
                  Value: spot-demo-private-rt2
            VpcId : !Ref VPC
    PrivateRoute2:
        Type: AWS::EC2::Route
        Properties : 
            DestinationCidrBlock : 0.0.0.0/0
            NatGatewayId : !Ref NatGateway2
            RouteTableId : !Ref PrivateRouteTable2
    PrivateSubnetRouteTableAssociation2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties : 
            RouteTableId : !Ref PrivateRouteTable2
            SubnetId : !Ref PrivateSubnet2
    PrivateRouteTable3:
        Type: AWS::EC2::RouteTable
        Properties : 
            Tags : 
                - Key: Name
                  Value: spot-demo-private-rt3
            VpcId : !Ref VPC
    PrivateRoute3:
        Type: AWS::EC2::Route
        Properties : 
            DestinationCidrBlock : 0.0.0.0/0
            NatGatewayId : !Ref NatGateway3
            RouteTableId : !Ref PrivateRouteTable3
    PrivateSubnetRouteTableAssociation3:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties : 
            RouteTableId : !Ref PrivateRouteTable3
            SubnetId : !Ref PrivateSubnet3
    Ec2Vpcndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties : 
            PrivateDnsEnabled : True
            ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
            SubnetIds : 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3
            VpcEndpointType : Interface
            VpcId : !Ref VPC
    Ec2MessagesVpcndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties : 
            PrivateDnsEnabled : True
            ServiceName : !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
            SubnetIds : 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3
            VpcEndpointType : Interface
            VpcId : !Ref VPC
    SsmVpcndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties : 
            PrivateDnsEnabled : True
            ServiceName : !Sub 'com.amazonaws.${AWS::Region}.ssm'
            SubnetIds : 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3
            VpcEndpointType : Interface
            VpcId : !Ref VPC
    SsmMessagesVpcndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties : 
            PrivateDnsEnabled : True
            ServiceName : !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
            SubnetIds : 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3
            VpcEndpointType : Interface
            VpcId : !Ref VPC
    LogsVpcndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties : 
            PrivateDnsEnabled : True
            ServiceName : !Sub 'com.amazonaws.${AWS::Region}.logs'
            SubnetIds : 
                - !Ref PrivateSubnet1
                - !Ref PrivateSubnet2
                - !Ref PrivateSubnet3
            VpcEndpointType : Interface
            VpcId : !Ref VPC
    Ec2SsmRole:
        Type: AWS::IAM::Role
        Properties : 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                      Effect: "Allow"
                      Principal: 
                        Service: 
                          - "ec2.amazonaws.com"
                      Action: 
                        - "sts:AssumeRole"
            Policies:
                - 
                    PolicyName: !Sub '${AWS::StackName}-lambda'
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - lambda:InvokeFunction
                                Resource:
                                    - !GetAtt GetWorkloadInitialState.Arn
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
    Ec2SsmInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties : 
            Roles : 
                - !Ref Ec2SsmRole
    IamFleetRole:
        Type: AWS::IAM::Role
        Properties : 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - 
                      Effect: Allow
                      Principal: 
                        Service: 
                          - spotfleet.amazonaws.com
                      Action: 
                        - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
    SpotDemoLaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateData:
                ImageId: !FindInMap [AmazonLinux2ImageMap, !Ref "AWS::Region", HVM64]
                InstanceType: t2.medium
                IamInstanceProfile:
                    Name: !Ref Ec2SsmInstanceProfile
                SecurityGroupIds: 
                    - !GetAtt VPC.DefaultSecurityGroup
                UserData: 
                    Fn::Base64: !Sub |
                        #!/bin/bash

                        # update packages
                        yum update -y

                        # Install git
                        yum install -y git

                        # installing ruby 2.4
                        amazon-linux-extras install -y ruby2.4

                        cd /home/ssm-user
                        runuser -l  ssm-user -c 'curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash'
                        runuser -l  ssm-user -c 'export NVM_DIR="/home/ssm-user/.nvm"'
                        runuser -l  ssm-user -c '. /home/ssm-user/.nvm/nvm.sh'
                        runuser -l  ssm-user -c 'source /home/ssm-user/.bashrc'
                        runuser -l  ssm-user -c 'nvm install v8.10.0'

                        # cloning the repo
                        runuser -l  ssm-user -c "git clone https://github.com/marcosortiz/aws-spot-interruption.git"
                        cd /home/ssm-user
                        runuser -l  ssm-user -c 'cp /home/ssm-user/aws-spot-interruption/backend/package* /home/ssm-user'
                        runuser -l  ssm-user -c "npm install"

                        # Installing awslogs agent
                        yum install -y awslogs
                        cd /home/ssm-user
                        cat /home/ssm-user/aws-spot-interruption/backend/config/awslogs.conf | sudo tee /etc/awslogs/awslogs.conf
                        sudo systemctl start awslogsd

                        # install and run the watchdog
                        cd /home/ssm-user
                        runuser -l  ssm-user -c 'cp /home/ssm-user/aws-spot-interruption/backend/src/ec2/watchdog.rb /home/ssm-user'
                        runuser -l  ssm-user -c 'nohup ruby ./watchdog.rb > /dev/null 2>&1 &'

                        # install and run the app
                        cd /home/ssm-user
                        cat << EOL | sudo tee /home/ssm-user/config.json
                        {
                            "region": "${AWS::Region}",
                            "functionName": "${GetWorkloadInitialState.Arn}"
                        }
                        EOL
                        chown ssm-user /home/ssm-user/config.json
                        chgrp ssm-user /home/ssm-user/config.json
                        runuser -l  ssm-user -c 'cp /home/ssm-user/aws-spot-interruption/backend/src/ec2/app.js /home/ssm-user'
                        runuser -l  ssm-user -c 'nohup node ./app.js > ./app.log 2>&1 &'
                TagSpecifications:
                    -
                      ResourceType: instance
                      Tags:
                        - Key: Name
                          Value: spot-demo-instance
                    -
                      ResourceType: instance
                      Tags:
                        - Key: volume
                          Value: spot-demo-instance
            LaunchTemplateName: spot-demo-lt
    FrontEndDistributionIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: spot-demo-identity
    FrontEndDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: true
                DefaultRootObject: index.html
                Origins:
                    - DomainName: !GetAtt WebsiteBucket.DomainName
                      Id: !Ref WebsiteBucket
                      S3OriginConfig:
                        OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${FrontEndDistributionIdentity}
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                    TargetOriginId: !Ref WebsiteBucket
                    ForwardedValues:
                        QueryString: false
                        Cookies:
                            Forward: none
                    ViewerProtocolPolicy: allow-all
    WebsiteBucket:
        Type: AWS::S3::Bucket
    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref WebsiteBucket
            PolicyDocument:
                Version: '2012-10-17'
                Id: PolicyForCloudFrontPrivateContent
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            CanonicalUser:
                                Fn::GetAtt: [ FrontEndDistributionIdentity , S3CanonicalUserId ]
                        Action: s3:GetObject
                        Resource: !Sub "${WebsiteBucket.Arn}/*"

Outputs:
    UserPoolId:
        Description: UserPoolId id
        Value: !Ref SpotDemoUserPool
    IdentityPoolId:
        Description: IdentityPoolId id
        Value: !Ref SpotDemoIdentityPool
    userPoolWebClientId:
        Description: The user pool web client id
        Value: !Ref UserPoolClient
    SpotFleetRequestsTable:
        Description: SpotFleetRequestsTable table name
        Value: !Ref SpotFleetRequestsTable
    SpotInterruptionsTable:
        Description: SpotInterruptionsTable table name
        Value: !Ref SpotInterruptionsTable
    SpotWorkloads:
        Description: SpotWorkloads table name
        Value: !Ref SpotWorkloads
    SpotDemoLaunchTemplate:
        Description: EC2 launch templace id
        Value: !Ref SpotDemoLaunchTemplate
    SpotDemoLaunchTemplateVersion:
        Description: Latest EC2 launch templace version
        Value: !GetAtt SpotDemoLaunchTemplate.LatestVersionNumber
    PrivateSubnet1:
        Description: The id of private subnet 1
        Value: !Ref PrivateSubnet1
    PrivateSubnet2:
        Description: The id of private subnet 2
        Value: !Ref PrivateSubnet2
    PrivateSubnet3:
        Description: The id of private subnet 3
        Value: !Ref PrivateSubnet3
    QueryWorkloadsFunctionArn:
        Description: The Arn of the lambda function that queries existing workloads
        Value: !GetAtt QueryWorkloads.Arn
    WebsiteBucket:
        Description: The frontend website url
        Value: !GetAtt WebsiteBucket.DomainName
    FrontEndDistribution:
        Description: The frontend cloudFront distribution domain name
        Value: !GetAtt FrontEndDistribution.DomainName
    IamFleetRole:
        Description: The IAM role used on the spot fleet request.
        Value: !GetAtt IamFleetRole.Arn